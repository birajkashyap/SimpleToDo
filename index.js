
/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require('fs');
  
  const app = express();
  
  app.use(bodyParser.json());
  
  // In-memory storage for todo items
  let listOfToDos = [
    {
      title: 'Coding',
      completed: true,
      description: 'Make a to-do app',
      id: 88612,
    },
    {
      title: 'Play guitar',
      completed: false,
      description: 'Learn to sing a new song on guitar',
      id: 12756,
    },
  ];
  
  // Function to assign unique IDs
  function IdAssigner() {
    return Math.floor(Math.random() * 100000);
  }
  
  // Route to get all todos
  app.get('/todos', function (req, res) {
    res.status(200).json(listOfToDos);
  });
  
  // Route to get a specific todo by ID
  app.get('/todos/:id', function (req, res) {
    const id = parseInt(req.params.id, 10);
  
    const todo = listOfToDos.find(todo => todo.id === id);
  
    if (todo) {
      res.status(200).json(todo);
    } else {
      res.status(404).json({ error: 'Todo not found' });
    }
  });
  
  // Route to create a new todo item
  app.post('/todos', (req, res) => {
    const newToDo = {
      title: req.body.title,
      completed: req.body.completed || false,
      description: req.body.description,
      id: IdAssigner(),
    };
  
    listOfToDos.push(newToDo);
    
    // Save to file
    fs.writeFile('./Storage.txt', JSON.stringify(listOfToDos), (err) => {
      if (err) {
        console.error('Error saving todo list:', err);
        res.status(500).json({ error: 'Internal server error' });
        return;
      }
      console.log('Todo list saved successfully');
    });
  
    res.status(201).json({ id: newToDo.id });
  });
  
  // Route to update an existing todo item by ID
  app.put('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
    const updatedTodo = req.body;
  
    let todoIndex = listOfToDos.findIndex(todo => todo.id === id);
  
    if (todoIndex !== -1) {
      listOfToDos[todoIndex] = { ...listOfToDos[todoIndex], ...updatedTodo };
      res.status(200).json(listOfToDos[todoIndex]);
    } else {
      res.status(404).json({ error: 'Todo not found' });
    }
  });
  
  // Route to delete a todo item by ID
  app.delete('/todos/:id', (req, res) => {
    const id = parseInt(req.params.id, 10);
  
    const initialLength = listOfToDos.length;
    listOfToDos = listOfToDos.filter(todo => todo.id !== id);
  
    if (listOfToDos.length < initialLength) {
      // Save to file
      fs.writeFile('./Storage.txt', JSON.stringify(listOfToDos), (err) => {
        if (err) {
          console.error('Error saving todo list:', err);
          res.status(500).json({ error: 'Internal server error' });
          return;
        }
        console.log('Todo list saved successfully');
      });
  
      res.status(200).json({ message: 'Todo deleted successfully' });
    } else {
      res.status(404).json({ error: 'Todo not found' });
    }
  });
  
  // 404 Route
  app.use((req, res) => {
    res.status(404).json({ error: 'Route not found' });
  });
  
  // Start the server
  const port = 3000;
  app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
  });
  